version: '2.4'

networks:

    connected:
        name: seedbox_connected
        driver: bridge
        ipam:
            driver: default
            config: # http://www.subnet-calculator.com/subnet.php?net_class=B
            - subnet: 172.1.0.0/25 # 172.1.0.1 - 172.1.0.126
              gateway: 172.1.0.126
              ip_range: 172.1.0.0/26 # 172.1.0.1 - 172.1.0.62

    hidden:
        name: seedbox_hidden
        internal: true

volumes:
    elasticsearch_data: {}
    grafana_data: {}
    influx_data: {}
    mongo_data: {}
    # mosquitto_data: {}
    prometheus_data: {}
    openvpn-ui_data: {}
    mattermost_data: {}
    mysql_data: {}
    peerflix_data: {}
    graphite_data: {}
    thelounge_data: {}
    commafeed_data: {}
    redis_data: {}
    zenbot_data: {}
    theia_data: {}
    jsbin_data: {}

services:

    elasticsearch: # Json database
        container_name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch:7.3.2
        restart: ${RESTART_MODE}
        environment:
          discovery.type: single-node
          ES_JAVA_OPTS: "-Xmx512m -Xms512m"
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        networks:
            - hidden
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    # curator: # Elasticsearch indices janitor
    #     container_name: curator
    #     image: praseodym/elasticsearch-curator
    #     restart: ${RESTART_MODE}
    #     command:
    #         - '--config'
    #         - 'config.yml'
    #         - 'action.yml'
    #     networks:
    #         - hidden
    #     depends_on:
    #         - elasticsearch
    #     volumes:
    #         - ./config/curator/config.yml:/curator/config.yml
    #         - ./config/curator/action.yml:/curator/action.yml
    #     logging:
    #         options:
    #             max-size: "50k"
    #             max-file: "2"

    kibana: # Elasticsearch data UI
        container_name: kibana
        image: docker.elastic.co/kibana/kibana:7.3.2
        restart: ${RESTART_MODE}
        environment:
            SERVER_NAME: kibana
            LOGGING_QUIET: 'true'
        networks:
            - connected
            - hidden
        depends_on:
            - elasticsearch
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:kibana.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=5601"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    logstash: # Logs watcher
        container_name: logstash
        image: docker.elastic.co/logstash/logstash:7.3.2
        restart: ${RESTART_MODE}
        environment:
            LOG_LEVEL: warn
        volumes:
            - ./config/logstash/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
            - ./config/logstash/pipeline:/usr/share/logstash/pipeline:ro
        networks:
            - connected
            - hidden
        depends_on:
            - rabbitmq
            - elasticsearch
        labels:
            - "traefik.enable=false"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    filebeat: # Logs watcher
        container_name: filebeat
        image: docker.elastic.co/beats/filebeat:7.3.2
        restart: ${RESTART_MODE}
        command: filebeat -e -strict.perms=false
        user: root
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - /var/lib/docker:/var/lib/docker:ro
            - ./config/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
        networks:
            - hidden
        depends_on:
            - logstash
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    samba: # SMB server
        container_name: samba
        image: dperson/samba
        command: '-s "shared;/mount;yes;no;yes;all;none"'
        restart: ${RESTART_MODE}
        ports:
            - "139:139"
            - "445:445"
        volumes:
            - ./download/complete:/mount/downloads
            - ./shared:/mount/shared
            - /media/nuc/WD2To:/mount/media
        networks:
            - connected
        labels:
            - "traefik.enable=false"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    sftp: # Sftp server
        container_name: sftp
        image: atmoz/sftp
        command: ${SFTP_COMMAND}
        restart: ${RESTART_MODE}
        ports:
            - "32768:22"
        volumes:
            - ./download/complete:/home/shokohsc/upload/downloads
            - ./shared:/home/shokohsc/upload/shared
            - /media/nuc/WD2To:/home/shokohsc/upload/media
        networks:
            - connected
        labels:
            - "traefik.enable=false"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    duckdns: # Dynamic IP <-> Domain
        container_name: duckdns
        image: linuxserver/duckdns
        restart: ${RESTART_MODE}
        environment:
            SUBDOMAINS: ${DUCKDNS_SUBDOMAINS}
            TOKEN: ${DUCKDNS_TOKEN}
            TZ: ${TIMEZONE}
        networks:
            - connected
        labels:
            - "traefik.enable=false"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    openvpn: # Internal vpn
        container_name: openvpn
        image: kylemanna/openvpn
        tty: true
        cap_add:
            - net_admin
        restart: ${RESTART_MODE}
        expose:
            - "5555"
        ports:
            - "32767:1194/udp"
        logging:
            driver: none
        volumes:
            - ./config/openvpn:/etc/openvpn
        networks:
            - connected
        labels:
            - "traefik.enable=false"

    openvpn-tcp: # Internal vpn fallback tcp
        container_name: openvpn-tcp
        image: kylemanna/openvpn
        command: ovpn_run --proto tcp
        tty: true
        privileged: true
        restart: ${RESTART_MODE}
        ports:
            - "32767:1194/tcp"
        logging:
            driver: none
        volumes:
            - ./config/openvpn:/etc/openvpn
        networks:
            - connected
        depends_on:
            - openvpn
        labels:
            - "traefik.enable=false"

    sidekick: # Vpn profile api
        container_name: sidekick
        image: shokohsc/sidekick
        restart: ${RESTART_MODE}
        environment:
            MATTERMOST_WEBHOOK_URL: ${MATTERMOST_GATEWAY_SIDEKICK_WEBHOOK}
            RCON_HOST: minecraft
            RCON_PORT: ${RCON_PORT}
            RCON_PASSWORD: ${RCON_PASSWORD}
            AMQP_HOST: rabbitmq
        networks:
            - connected
        labels:
            - "traefik.enable=false"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    vpn-transmission: # Torrenting vpn
        container_name: vpn-transmission
        image: shokohsc/openvpn-client
        cap_add:
            - net_admin
        restart: ${RESTART_MODE}
        environment:
            TZ: ${TIMEZONE}
            FIREWALL: ''
            ROUTE: 192.168.1.0/24
            VPNPORT: 9091
            SIDEKICK_URL: http://sidekick:3000/api/ovpn
        depends_on:
            - sidekick
        devices:
            - "/dev/net/tun:/dev/net/tun"
        networks:
            connected:
                ipv4_address: 172.1.0.63
        dns: 8.8.8.8
        labels:
            - "autoheal=true"
            - "traefik.enable=true"
            - "traefik.transmission.frontend.rule=Host:transmission.${DOMAIN}"
            - "traefik.transmission.port=9091"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    transmission: # Torrent client
        container_name: transmission
        image: linuxserver/transmission
        restart: ${RESTART_MODE}
        volumes:
            - ./config/transmission:/config
            - ./download:/downloads
            - ./shared/transmission:/watch
        network_mode: "service:vpn-transmission"
        depends_on:
            - vpn-transmission
        labels:
            - "autoheal=true"
        healthcheck:
            test: ["CMD", "curl", "-IfkLX", "GET", "https://ifconfig.co"]
            interval: 30s
            timeout: 30s
            start_period: 60s
            retries: 5
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    traefik: # Reverse proxy
        container_name: traefik
        image: traefik:1.7.16-alpine
        restart: ${RESTART_MODE}
        command: --configFile=/etc/traefik/traefik.toml --metrics --metrics.prometheus
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
            - ./config/traefik/certs:/etc/traefik/certs
            - ./config/traefik/traefik.toml:/etc/traefik/traefik.toml
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:traefik.${DOMAIN}"
            - "traefik.port=8080"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    portainer: # Docker management
        container_name: portainer
        image: portainer/portainer
        restart: ${RESTART_MODE}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:portainer.${DOMAIN}"
            - "traefik.port=9000"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    autoheal: # Service looking for container to restart
        container_name: autoheal
        image: willfarrell/autoheal
        restart: ${RESTART_MODE}
        environment:
            AUTOHEAL_INTERVAL: 10
            AUTOHEAL_START_PERIOD: 60
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - connected
        labels:
            - "traefik.enable=false"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    commander: # Web ui server admin
        container_name: commander
        image: coderaiser/cloudcmd
        restart: ${RESTART_MODE}
        volumes:
            - /:/mnt/fs
            - ./download/complete:/root/downloads
            - ./shared:/root/shared
            - /media/nuc/WD2To:/root/media
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:commander.${DOMAIN}"
            - "traefik.port=8000"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    plex: # Media server
        container_name: plex
        image: linuxserver/plex
        restart: ${RESTART_MODE}
        environment:
            PGID: ${PGID}
            PUID: ${PUID}
            VERSION: latest
            PLEX_CLAIM: ${PLEX_CLAIM}
            ADVERTISE_IP: ${PLEX_ROOT_URL}
            TZ: ${TIMEZONE}
        ports:
            - "32400:32400/tcp"
            - "3005:3005/tcp"
            - "8324:8324/tcp"
            - "32469:32469/tcp"
            - "1900:1900/udp"
            - "32410:32410/udp"
            - "32412:32412/udp"
            - "32413:32413/udp"
            - "32414:32414/udp"
            - "32400:32400/udp"
            - "32469:32469/udp"
            - "5353:5353/tcp"
        devices:
            - "/dev/dri:/dev/dri"
        volumes:
            - ./config/plex:/config
            - ./work/plex:/transcode
            - /media/nuc/WD2To:/data/media
            - ./download/complete:/data/downloads
        networks:
            - connected
        hostname: "plex"
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:plex.${DOMAIN}"
            - "traefik.port=32400"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    grafana: # Monitoring tool connected server
        container_name: grafana
        image: grafana/grafana
        restart: ${RESTART_MODE}
        environment:
            GF_SECURITY_ADMIN_PASSWORD: ${GLOBAL_PASSWORD}
            GF_SERVER_ROOT_URL: ${GRAFANA_ROOT_URL}
            GF_SMTP_ENABLED: ${GF_SMTP_ENABLED}
            GF_SMTP_HOST: ${GF_SMTP_HOST}
            GF_SMTP_USER: ${GF_SMTP_USER}
            GF_SMTP_PASSWORD: ${GF_SMTP_PASSWORD}
            GF_SMTP_FROM_ADDRESS: ${GF_SMTP_FROM_ADDRESS}
            GF_SMTP_FROM_NAME: ${GF_SMTP_FROM_NAME}
            GF_INSTALL_PLUGINS: grafana-piechart-panel,grafana-image-renderer
            GF_LOG_LEVEL: warn
        volumes:
            - grafana_data:/var/lib/grafana
            - ./config/grafana/setup.sh:/setup.sh
        networks:
            - connected
            - hidden
        depends_on:
            - prometheus
            - pushgateway
            - nodeexporter
            - cadvisor
            - influxdb
            - graphite
            - elasticsearch
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:grafana.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=3000"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    prometheus: # Database, grafana requirement
        image: prom/prometheus:v2.4.3
        container_name: prometheus
        restart: ${RESTART_MODE}
        volumes:
            - ./config/prometheus/:/etc/prometheus/
            - prometheus_data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/etc/prometheus/console_libraries'
            - '--web.console.templates=/etc/prometheus/consoles'
            - '--storage.tsdb.retention=24h'
            - '--web.enable-lifecycle'
        networks:
            - connected
            - hidden
        labels:
            - "traefik.enable=false"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    alertmanager: # Grafana requirement
        image: prom/alertmanager:v0.15.2
        container_name: alertmanager
        volumes:
            - ./config/alertmanager/:/etc/alertmanager/
        command:
            - '--config.file=/etc/alertmanager/config.yml'
            - '--storage.path=/alertmanager'
        restart: ${RESTART_MODE}
        networks:
            - hidden
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    nodeexporter: # Grafana requirement
        image: prom/node-exporter:v0.16.0
        container_name: nodeexporter
        restart: ${RESTART_MODE}
        user: root
        privileged: true
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command:
            - '--path.procfs=/host/proc'
            - '--path.sysfs=/host/sys'
            - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
        networks:
            - hidden
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    cadvisor: # Grafana requirement
        image: google/cadvisor:v0.31.0
        container_name: cadvisor
        restart: ${RESTART_MODE}
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
            - /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
        networks:
            - hidden
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    pushgateway: # Grafana requirement
        image: prom/pushgateway
        container_name: pushgateway
        restart: ${RESTART_MODE}
        networks:
            - hidden
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    heimdall: # Heimdall
        image: linuxserver/heimdall
        container_name: heimdall
        restart: ${RESTART_MODE}
        environment:
            PGID: ${PGID}
            PUID: ${PUID}
            TZ: ${TIMEZONE}
        volumes:
            - ./config/heimdall:/config
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:heimdall.${DOMAIN}"
            - "traefik.port=80"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    monitor: # Openvpn monitor
        image: ruimarinho/openvpn-monitor
        container_name: monitor
        restart: ${RESTART_MODE}
        environment:
            OPENVPNMONITOR_DEFAULT_MAPS: "True"
            OPENVPNMONITOR_DEFAULT_DATETIMEFORMAT: ${OPENVPNMONITOR_DEFAULT_DATETIMEFORMAT}
            OPENVPNMONITOR_DEFAULT_LATITUDE: ${OPENVPNMONITOR_DEFAULT_LATITUDE}
            OPENVPNMONITOR_DEFAULT_LONGITUDE: ${OPENVPNMONITOR_DEFAULT_LONGITUDE}
            OPENVPNMONITOR_DEFAULT_SITE: ${OPENVPNMONITOR_DEFAULT_SITE}
            OPENVPNMONITOR_SITES_0_HOST: ${OPENVPNMONITOR_SITES_0_HOST}
            OPENVPNMONITOR_SITES_0_NAME: ${OPENVPNMONITOR_SITES_0_NAME}
            OPENVPNMONITOR_SITES_0_PORT: ${OPENVPNMONITOR_SITES_0_PORT}
        networks:
            - connected
        depends_on:
            - openvpn
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:monitor.${DOMAIN}"
            - "traefik.port=80"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    openvpn-ui:
        container_name: openvpn-ui
        image: awalach/openvpn-web-ui
        restart: ${RESTART_MODE}
        restart: always
        volumes:
            - ./config/openvpn:/etc/openvpn
            - openvpn-ui_data:/opt/openvpn-gui/db
        networks:
            - connected
        depends_on:
            - openvpn
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:openvpn.${DOMAIN}"
            - "traefik.port=8080"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    comic-reader:
        container_name: comic-reader
        image: shokohsc/server-comic-reader
        restart: ${RESTART_MODE}
        tty: true
        volumes:
            - /var/www/symfony
            - ./shared/gazee:/var/www/symfony/public/files/weekly
            - /media/nuc/WD2To/comics:/var/www/symfony/public/files/all
        networks:
            - hidden
        logging:
            driver: none

    php-fpm-comic:
        container_name: php-fpm-comic
        image: shokohsc/alpine-php-fpm
        restart: ${RESTART_MODE}
        environment:
            PGID: ${PGID}
            PUID: ${PUID}
            TZ: ${TIMEZONE}
        volumes_from:
            - comic-reader
        networks:
            - hidden
        depends_on:
            - comic-reader
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    nginx-comic:
        container_name: nginx-comic
        image: shokohsc/alpine-nginx
        restart: ${RESTART_MODE}
        environment:
            PGID: ${PGID}
            PUID: ${PUID}
            TZ: ${TIMEZONE}
        volumes_from:
            - comic-reader
        networks:
            - hidden
            - connected
        links:
            - "php-fpm-comic:php-fpm"
        depends_on:
            - php-fpm-comic
            - comic-reader
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:comics.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=80"
        logging:
            options:
                max-size: "50k"
                max-file: "2"


    wol-web:
        container_name: wol-web
        image: shokohsc/server-wol
        restart: ${RESTART_MODE}
        tty: true
        volumes:
            - /var/www/symfony
        networks:
            - hidden
        logging:
            driver: none

    php-fpm-wol:
        container_name: php-fpm-wol
        image: shokohsc/alpine-php-fpm
        restart: ${RESTART_MODE}
        environment:
            PGID: ${PGID}
            PUID: ${PUID}
            TZ: ${TIMEZONE}
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        volumes_from:
            - wol-web
        networks:
            - connected
        depends_on:
            - wol-web
        labels:
            - "traefik.enable=false"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    nginx-wol:
        container_name: nginx-wol
        image: shokohsc/alpine-nginx
        restart: ${RESTART_MODE}
        environment:
            PGID: ${PGID}
            PUID: ${PUID}
            TZ: ${TIMEZONE}
        volumes_from:
            - wol-web
        networks:
            - connected
        links:
            - "php-fpm-wol:php-fpm"
        depends_on:
            - php-fpm-wol
            - wol-web
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:wol.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=80"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    paint-web:
        container_name: paint-web
        image: shokohsc/mini-paint
        restart: ${RESTART_MODE}
        environment:
            PGID: ${PGID}
            PUID: ${PUID}
            TZ: ${TIMEZONE}
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:paint.${DOMAIN}"
            - "traefik.port=80"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    telegraf: # Telegraf
        container_name: telegraf
        image: telegraf
        restart: ${RESTART_MODE}
        networks:
            - connected
            - hidden
        volumes:
            - ./config/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
        depends_on:
            - influxdb
            - graphite
            - elasticsearch
            # - mosquitto
        labels:
            - "traefik.enable=false"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    graphite: # Graphite database
        container_name: graphite
        image: graphiteapp/graphite-statsd
        restart: ${RESTART_MODE}
        networks:
            - connected
        volumes:
            - graphite_data:/opt/graphite/storage
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:graphite.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=8080"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    influxdb: # Influx database
        container_name: influxdb
        image: influxdb
        restart: ${RESTART_MODE}
        environment:
            INFLUXDB_DB: miflora
            INFLUXDB_USER: miflora
            INFLUXDB_USER_PASSWORD: ${INFLUXDB_USER_PASSWORD}
            INFLUXDB_DATA_QUERY_LOG_ENABLED: 'false'
            INFLUXDB_HTTP_LOG_ENABLED: 'false'
            INFLUXDB_LOGGING_LEVEL: warn
        networks:
            - hidden
        volumes:
            - influx_data:/var/lib/influxdb
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    chronograf: # InfluxDB Admin UI
        image: chronograf
        container_name: chronograf
        restart: ${RESTART_MODE}
        command: --influxdb-url=http://influxdb:8086
        networks:
            - connected
            - hidden
        depends_on:
            - influxdb
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:chronograf.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=8888"
        logging:
            options:
                max-size: "50k"
                max-file: "2"
    #
    # mosquitto: # Mosquitto mqtt broker
    #     container_name: mosquitto
    #     image: eclipse-mosquitto
    #     restart: ${RESTART_MODE}
    #     ports:
    #         - "1883:1883/tcp"
    #     networks:
    #         - connected
    #     volumes:
    #         - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    #         - mosquitto_data:/mosquitto/data
    #     labels:
    #         - "traefik.enable=false"
    #     logging:
    #         options:
    #             max-size: "50k"
    #             max-file: "2"

    # miflora-daemon: # Miflora daemon
    #     container_name: miflora-daemon
    #     build:
    #         context: build/miflora-mqtt-daemon
    #     cap_add:
    #         - net_admin
    #         - sys_admin
    #     restart: ${RESTART_MODE}
    #     volumes:
    #         - ./config/miflora/config.ini:/app/config.ini
    #     network_mode: host
    #     depends_on:
    #         - mosquitto
    #     logging:
    #         options:
    #             max-size: "50k"
    #             max-file: "2"
    #
    # mqtt-forwarder:
    #     container_name: mqtt-forwarder
    #     build:
    #         context: build/mqtt-forwarder
    #     restart: ${RESTART_MODE}
    #     environment:
    #         INFLUXDB_HOST: influxdb
    #         INFLUXDB_DB: miflora
    #         INFLUXDB_USER: miflora
    #         INFLUXDB_PASSWORD: ${INFLUXDB_USER_PASSWORD}
    #         MQTT_HOST: mosquitto
    #         MQTT_TOPIC: ${MQTT_TOPIC}
    #     networks:
    #         - connected
    #         - hidden
    #     depends_on:
    #         - influxdb
    #         - mosquitto
    #     labels:
    #         - "traefik.enable=false"
    #     logging:
    #         options:
    #             max-size: "50k"
    #             max-file: "2"

    minecraft:
        container_name: minecraft
        image: itzg/minecraft-server
        restart: ${RESTART_MODE}
        environment:
            EULA: 'TRUE'
            VERSION: 1.14.4
            TYPE: SPIGOT
            OVERRIDE_SERVER_PROPERTIES: 'true'
            CONSOLE: 'false'
            ONLINE_MODE: 'false'
            ALLOW_FLIGHT: 'true'
            MEMORY: 2G
            LEVEL_TYPE: AMPLIFIED
            LEVEL: world
            PVP: 'true'
            MOTD: A Vanilla Minecraft Server powered by Docker
            MODE: survival
            SEED: -8913466909937400889
            VIEW_DISTANCE: 10
            SPAWN_PROTECTION: 16
            SPAWN_MONSTERS: 'true'
            SPAWN_NPCS: 'true'
            SPAWN_ANIMALS: 'true'
            MAX_TICK_TIME: 60000
            MAX_BUILD_HEIGHT: 512
            SNOOPER_ENABLED: 'false'
            HARDCORE: 'false'
            GENERATE_STRUCTURES: 'true'
            FORCE_GAMEMODE: 'false'
            ENABLE_COMMAND_BLOCK: 'true'
            MAX_PLAYERS: 10
            MAX_WORLD_SIZE: 29999984
            ALLOW_NETHER: 'true'
            ANNOUNCE_PLAYER_ACHIEVEMENTS: 'true'
            ENABLE_QUERY: 'false'
            ENABLE_RCON: 'true'
            RCON_PORT: ${RCON_PORT}
            RCON_PASSWORD: ${RCON_PASSWORD}
            OPS: ${MINECRAFT_OPS}
            DIFFICULTY: hard
            SERVER_NAME: minecraft
            SERVER_PORT: 25565
        ports:
            - "25565:25565/tcp"
        volumes:
            - ./config/minecraft:/data
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:minecraft.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=8123"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    mongo: # Wekan requirement
        image: mongo
        container_name: mongo
        restart: ${RESTART_MODE}
        volumes:
            - mongo_data:/data/db
        networks:
            - hidden
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    wekan: # Wekan
        image: wekanteam/wekan
        container_name: wekan
        restart: ${RESTART_MODE}
        environment:
            ROOT_URL: ${WK_ROOT_URL}
            MONGO_URL: ${MONGO_URL}/wekan
        networks:
            - connected
            - hidden
        depends_on:
            - mongo
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:wekan.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=8080"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    mongo-express:
        image: mongo-express
        container_name: mongo-express
        restart: ${RESTART_MODE}
        networks:
            - connected
            - hidden
        depends_on:
            - mongo
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:mongo.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=8081"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    mysql:
        image: mariadb
        container_name: mysql
        restart: ${RESTART_MODE}
        volumes:
            - mysql_data:/var/lib/mysql
        networks:
            - hidden
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: mattermost
            MYSQL_USER: mattermost
            MYSQL_PASSWORD: mattermost
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    mattermost:
        build:
            context: build/mattermost
            args:
                - edition=team
        container_name: mattermost
        restart: ${RESTART_MODE}
        environment:
            MM_USERNAME: mattermost
            MM_PASSWORD: mattermost
            MM_DBNAME: mattermost
            MM_SQLSETTINGS_DRIVERNAME: mysql
            MM_SQLSETTINGS_DATASOURCE: mattermost:mattermost@tcp(mysql:3306)/mattermost?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s
            DB_HOST: mysql
            DB_PORT_NUMBER: 3306
        volumes:
            - mattermost_data:/mattermost
            - /etc/localtime:/etc/localtime:ro
        networks:
            - connected
            - hidden
        depends_on:
            - mysql
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:mattermost.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=8000"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    adminer:
        image: adminer
        container_name: adminer
        restart: ${RESTART_MODE}
        environment:
            ADMINER_DESIGN: konya
        networks:
            - connected
            - hidden
        depends_on:
            - mysql
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:adminer.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=8080"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    stackedit:
        image: benweet/stackedit
        container_name: stackedit
        restart: ${RESTART_MODE}
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:stackedit.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=8080"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    vpn-peerflix: # Torrenting vpn
        container_name: vpn-peerflix
        image: shokohsc/openvpn-client
        cap_add:
            - net_admin
        restart: ${RESTART_MODE}
        environment:
            TZ: ${TIMEZONE}
            FIREWALL: ''
            ROUTE: 192.168.1.0/24
            VPNPORT: 9000
            SIDEKICK_URL: http://sidekick:3000/api/ovpn
        depends_on:
            - sidekick
        devices:
            - "/dev/net/tun:/dev/net/tun"
        networks:
            connected:
                ipv4_address: 172.1.0.64
        dns: 8.8.8.8
        labels:
            - "autoheal=true"
            - "traefik.enable=true"
            - "traefik.peerflix.frontend.rule=Host:peerflix.${DOMAIN}"
            - "traefik.peerflix.port=9000"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    peerflix:
        image: shokohsc/peerflix-server
        container_name: peerflix
        restart: ${RESTART_MODE}
        network_mode: "service:vpn-peerflix"
        volumes:
            - peerflix_data:/tmp/torrent-stream
        depends_on:
            - vpn-peerflix
        labels:
            - "autoheal=true"
        healthcheck:
            test: ["CMD", "curl", "-IfkLX", "GET", "https://ifconfig.co"]
            interval: 30s
            timeout: 30s
            start_period: 60s
            retries: 5
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    vpn-cloudtorrent: # Torrenting vpn
        container_name: vpn-cloudtorrent
        image: shokohsc/openvpn-client
        cap_add:
            - net_admin
        restart: ${RESTART_MODE}
        environment:
            TZ: ${TIMEZONE}
            FIREWALL: ''
            ROUTE: 192.168.1.0/24
            VPNPORT: 3000
            SIDEKICK_URL: http://sidekick:3000/api/ovpn
        depends_on:
            - sidekick
        devices:
            - "/dev/net/tun:/dev/net/tun"
        networks:
            connected:
                ipv4_address: 172.1.0.65
        dns: 8.8.8.8
        labels:
            - "autoheal=true"
            - "traefik.enable=true"
            - "traefik.torrent.frontend.rule=Host:torrent.${DOMAIN}"
            - "traefik.torrent.port=3000"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    cloudtorrent:
        image: shokohsc/cloud-torrent
        container_name: cloudtorrent
        restart: ${RESTART_MODE}
        network_mode: "service:vpn-cloudtorrent"
        volumes:
            - ./download/complete:/downloads
        depends_on:
            - vpn-cloudtorrent
        labels:
            - "autoheal=true"
        healthcheck:
            test: ["CMD", "curl", "-IfkLX", "GET", "https://ifconfig.co"]
            interval: 30s
            timeout: 30s
            start_period: 60s
            retries: 5
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    airsonic:
        image: linuxserver/airsonic
        container_name: airsonic
        restart: ${RESTART_MODE}
        environment:
            PGID: ${PGID}
            PUID: ${PUID}
            TZ: ${TIMEZONE}
        volumes:
            - /media/nuc/WD2To/music:/music:ro
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:music.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=4040"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    h5ai:
        image: corfr/h5ai
        container_name: h5ai
        restart: ${RESTART_MODE}
        volumes:
            - ./:/var/www
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:h5ai.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=80"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    rabbitmq:
        image: rabbitmq:management-alpine
        container_name: rabbitmq
        restart: ${RESTART_MODE}
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:rabbitmq.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=15672"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    thelounge:
        image: thelounge/thelounge
        container_name: thelounge
        restart: ${RESTART_MODE}
        volumes:
            - thelounge_data:/var/opt/thelounge
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:irc.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=9000"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    commafeed:
        image: saggio/commafeed
        container_name: commafeed
        restart: ${RESTART_MODE}
        volumes:
            - commafeed_data:/data
            - ./config/commafeed/config.yml:/config/config.yml
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:rss.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=8082"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    zenbot:
        image: deviavir/zenbot
        container_name: zenbot
        restart: ${RESTART_MODE}
        volumes:
            - zenbot_data:/data
            - ./config/zenbot/conf.js:/app/conf.js
        networks:
            - connected
            - hidden
        depends_on:
            - mongo
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:zenbot.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=17365"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    redis:
        image: redis
        container_name: redis
        restart: ${RESTART_MODE}
        volumes:
            - redis_data:/data
        networks:
            - hidden
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    redis-ui:
        image: marian/rebrow
        container_name: redis-ui
        restart: ${RESTART_MODE}
        networks:
            - connected
            - hidden
        depends_on:
            - redis
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:redis.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=5001"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    gekko:
        image: shokohsc/gekko
        container_name: gekko
        restart: ${RESTART_MODE}
        environment:
          HOST: gekko.${DOMAIN}
          PORT: 443
          USE_SSL: 1
        volumes:
            - ./config/gekko/config.js:/app/config.js
        networks:
            - connected
            - hidden
        depends_on:
            - redis
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:gekko.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=443"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    theia:
        image: theiaide/theia
        container_name: theia
        restart: ${RESTART_MODE}
        volumes:
            - theia_data:/home/project:cached
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:theia.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=3000"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    jsbin:
        image: robbash/jsbin
        container_name: jsbin
        restart: ${RESTART_MODE}
        environment:
            JSBIN_CONFIG: /jsbin.json
            PORT: 443
        volumes:
            - jsbin_data:/home/project:cached
            - ./config/jsbin/config.json:/jsbin.json:cached
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:jsbin.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=443"
        logging:
            options:
                max-size: "50k"
                max-file: "2"

    regex:
        image: njae86fq/regexr
        container_name: regex
        restart: ${RESTART_MODE}
        networks:
            - connected
        labels:
            - "traefik.enable=true"
            - "traefik.frontend.rule=Host:regex.${DOMAIN}"
            - "traefik.docker.network=${EXPOSED_NETWORK}"
            - "traefik.port=3000"
        logging:
            options:
                max-size: "50k"
                max-file: "2"
